/*

$$\                 $$\                 $$\       $$\ $$$$$$$\  $$$$$$$\  
$$ |                $$ |                \__|      $$ |$$  __$$\ $$  __$$\ 
$$$$$$$\  $$\   $$\ $$$$$$$\   $$$$$$\  $$\  $$$$$$$ |$$ |  $$ |$$ |  $$ |
$$  __$$\ $$ |  $$ |$$  __$$\ $$  __$$\ $$ |$$  __$$ |$$ |  $$ |$$$$$$$\ |
$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  \__|$$ |$$ /  $$ |$$ |  $$ |$$  __$$\ 
$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |
$$ |  $$ |\$$$$$$$ |$$$$$$$  |$$ |      $$ |\$$$$$$$ |$$$$$$$  |$$$$$$$  |
\__|  \__| \____$$ |\_______/ \__|      \__| \_______|\_______/ \_______/ 
          $$\   $$ |                                                      
          \$$$$$$  |                                                      
           \______/   

Description:
    A hybrid search combining depth-first and breadth-first search.
    Takes as an argument an undirected graph, an integer T, a starting node S, and a goal node G.
    Finds a path without cycles from S to G in the order prescribed by the value of T:

        If T < 0, proceed as a depth-first seacrh of the whole graph
        If T > 5, proceed as a breadth-first search of the whole graph
        For 1<=T<=5, proceed as hybrid:
            At each node n, the choice between depth and breadth depends on out-degree d(n)
                If d(n) < T, proceed as depth-first
                If d(n) >= T, proceed as breadth-first
Authors:
    Foertmeyer, Thomas
    Li, Kendrick
    Okel, Taylor
Date:
    22 Sept 2016

*/

/***********************************************************
KILL ALL, MUST RUN IN CONSOLE ?((dict X) (kill X) (fail))
***********************************************************/
kill indeg
kill outdeg
kill connect
kill newedges
kill alledges
kill degree

/***********************************************************
((nodes L)) lists the nodes, numbered from M to N, M < N of the graph
***********************************************************/
((nodes ( 1 2 3 4 5 6 7 8 9 10 ) ))

/***********************************************************
((connect_aux X Y M N)) when X < Y are random integers between 
M<= N; it makes use to the user defined predicate randint
***********************************************************/
((connect_aux X Y  M N )
    (randint M N X)
    (sum X 1 X1)
    (randint X1 N Y))

/***********************************************************
((randint M1 M2 M)) holds when M is a random integere between M1 and M2; M1 <= M2
It makes use of the bip ((random  X)) which generates a random vaue X in [0, 1]
It uses the formula M = M1 + (M2 - M1)* X
It makes use of the bip division which implements integer division; 
For example, ?((division 4.123 1 M)) returns M equal to 4
************************************************************/
((randint M1 M2 M)
    (random X)
    (sum M1 Y M2)(times X  Y Z)(sum M1 Z M3)
    (division M3 1 M))

/***********************************************************
((connect_aux2 N L)) generates a list of  N pairs (X Y) 
 where X and Y are random integers in the range 1 - 10 
It invokes connect_aux defined above
***********************************************************/

((connect_aux2 0 ()))

((connect_aux2 1 ((X Y)) )
    (connect_aux X Y 1 10))

((connect_aux2 N ((X Y)|L1) )
    (sum N -1 N1)
    (connect_aux2 N1 L1)
    (connect_aux X Y 1 10)
    (negg member (X Y) L1))

/***********************************************************
((connect_aux3 N L)) invokes ((connect_aux2 N L)) and defines the predicate ((edges L)) which is added to the knowledge base. 
Invoke connect_aux3 several times, each time with small values of N
For example, if the query ?((connect_aux3 3 L)) is executed 4 times, four clauses for the predicate newedges will be added to the knowledge base.
**********************************************************/

((connect_aux3 N L)
    (connect_aux2 N L)
      (addcl ((newedges L )) ))

/***********************************************************
alledges_aux collects all the edges from all the clauses for newedges and eliminates duplicates; 
It uses set_union defined below in list processing predicates it adds the clause ((alledges EDGES)) where EDGES is the list of 
unique edges collected from  newedges. 
***********************************************************/
((alledges_aux)
    (findall L ((newedges L)) L)(decide L))

((decide ()))
((decide (H))
    (addcl ((alledges H)) ))
((decide (H1 H2|T))
    (set_union H1 H2 H)
    (decide (H|T)))

/***********************************************************
((make PRED L)) will assert in the knowledge base the predicate PRED with the argument being an element of the list L, for ALL the elements of the list L.
For example, ?((make connect ((1 2) (4 9)) )) will add to the knowledge base the clauses ((connect 1 2)) and ((connect 4 9))
***********************************************************/

((make connect ()))
((make connect ((X Y)|T))
    (addcl ((connect X Y )) )
    (make connect T))

((path X Y)(connect X Y))
((path X Y)(connect Y X))

/************************************************************
+ ((outdeg_aux X N)) computes N as the number of nodes Y for 
+ which ((connect X Y)) holds;
+
+ It makes use of the built in predicates findall and length.
**************************************************************/
((outdeg_aux X N)
    (findall (X Y) ((connect X Y)) L)(length L N))

((outdeg_aux2 () ))
((outdeg_aux2 (H|T))
      (outdeg_aux H N)
      (addcl ((outdeg H N)) )
      (outdeg_aux2 T))

/****************************************************************
* ((indeg_aux X N)) computes N as the number of nodes Y for which * ((connect Y X)) holds;
*
* It makes use of the built in predicates findall and length
****************************************************************/

((indeg_aux X N)
    (findall (X Y) ((connect Y X)) L)(length L N))

((indeg_aux2 () ))
((indeg_aux2 (H|T))
   (indeg_aux H N)
   (addcl ((indeg H N)) )
   (indeg_aux2 T))

/****************************************************************
((deg_aux X N)) computes N as the number of nodes Y for which ((path X Y)) holds;
 path is the symmetric version of connect
 It makes use of the built in predicates findall and length
***************************************************************/
((deg_aux X N)
    (findall (X Y) ((path X Y)) L)(length L N))

((deg_aux2 () ))
((deg_aux2 (H|T))(deg_aux H N)(addcl ((deg H N)) )(deg_aux2 T))

/****************************************************************
GENERAL LIST PROCESSING PREDICATES USED IN THE PROGRAM
***************************************************************/
((member X (X|_)))
((member X (_|T))(member X T))

/***************************************************************
mem is likemember but removes an element once it finds it in the list
***************************************************************/
((mem _ () ()))
((mem H (H|T) T)(!))
((mem X (H|T) (H|T1))(mem X T T1))

((length () 0))
((length (H|T) N)(length T LN)(sum LN 1 N))

((append () L L))
((append (H1|T1) L2 (H1|T))(append T1 L2 T)) 

((set_union L1 L2 L)(append L1 L2 LL)(rem_dup LL L))

((rem_dup () ()))
((rem_dup (H|T) (H|TT))(!)(mem H T T1)(rem_dup T1 TT))

/***************************************************************
GENERATE GRAPH
***************************************************************/
/* gen nodes */
?((nodes N)(pp N))
/* gen random edges */
?((connect_aux3 4 L))
?((connect_aux3 4 L))
?((connect_aux3 4 L))
?((connect_aux3 4 L))
?((connect_aux3 4 L))
/* form the set of unique edges */
?((alledges_aux))
/* to make the connect predicate and add to the knowledge base
   invoke all edges and then make predicate */
?((alledges E)(make connect E))
/* obtain node degrees */
?((nodes NODES)(outdeg_aux2 NODES))
?((nodes NODES)(indeg_aux2 NODES))
?((nodes NODES)(deg_aux2 NODES))

/***************************************************************
BREADTH DEPTH SEARCHES
***************************************************************/

/* breadth */
((hybridS ((X|T) | PATHS) TN (X|T))
    (goal X)
)
((hybridS (PAth | TPaths) TN SOL)
    (doBreadth TN PAth)
    (expand PAth NPaths)
    (append TPaths NPaths NEWPATHS)
    (hybridS NEWPATHS TN SOL)
)

/* depth */
((hybridS (PAth | TPaths) TN SOL)
    (expand PAth NPaths)
    (append NPaths TPaths NEWPATHS)
    (hybridS NEWPATHS TN SOL)
)

((expand (HPath | TPath) NPaths)
    (findall (NEXT HPath | TPath)
        ((path HPath NEXT)(negg member NEXT (HPath | TPath)))
        NPaths
    )
)

((hybridDB TN S SOL)
    (hybridS ((S)) TN S1)
    (reverse S1 SOL)
    (pretty_print_solution SOL)
)

((doBreadth TN (X|T)) (greater TN 5) (!))
((doBreadth TN (X|T)) (less TN 0) (!) (fail))
((doBreadth TN (X|T)) (outdeg X OUtdeg) (greater_eq OUtdeg TN))

/* auxiliary predicates */
((member H (H|_)))
((member X (H|T))(member X T))

((print ())(p success))
((print (H | T))
     (p H "--->")
     (pp)(print T)) 

((reverse () ()))
((reverse (H|T) R)(reverse T RT)(append RT (H) R))

((append () L L))
((append (H|T) L2 (H|L))(append T L2 L))
/*
	Head taken from first argument, appended to front of third
	Tail of first argument is passed as the next (recursive) first argument
	Third argument (post-append) passed as the next (recursive) third argument
	Therefore, the head of the list is continuously appended to the third element
	...
	Don't know what the second does -> NPaths is passed into it
*/

((pretty_print_solution () ))
((pretty_print_solution (H|T))(pp)(p H "->")(pretty_print_solution T))

((greater X Y) (less Y X))
((greater_eq X Y) (less_eq Y X))

/***************************************************************
TEST 
***************************************************************/
((goal 10))

/*?((hybridDB 2 1 SOl))*/

/***************************************************************
DISCUSSION

There is no certainty that HybridDB is faster than its component search algorithms.  It is only sometimes more efficient than breadth-first or depth-first search. Furthermore, HybridDB does not always find the shortest path. Breadth-first is at least guaranteed to find the shortest path, and depth-first may never terminate.

Given more information about the locale of the goal node (whether it is close to the starting position or if it is deeper in the graph), HybridDB could be used to more efficiently search the graph by choosing the more efficient search or by using both. In the general case that this type of information is not available, the use of HybridDB may or may not outperform the component algorithms as the search would not be optimized fully.

This conclusion applies when considering a goal node on a fringe of a graph, with the starting node in the center. Breadth-first search would need to exhaust every level of the graph to reach this node, thereby wasting some cycles on paths that are known not to contain the solution. HybridDB transcends this limitation by using depth-first like algorithms to reach the fringe that the goal is resting on, and the breadth-first like algorithms to find the solution in the most efficient manner from this point. Depth-first, by comparison, might do the same, but has the potential to find a longer (less efficient) path to the solution.

In edge cases, such as the goal node residing on the first level of the graph (respective to the starting node) or a leaf node, breadth-first or depth-first searches would, respectively, find the most efficient path in the least amount of time. 

These examples show that HybridDB’s algorithm is useful only in specific situations with some graph information - for instance, the area in which the goal node resides. 


***************************************************************/
